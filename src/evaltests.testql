section "Dynamic semantics tests"

test "initial state"  
    with 
    form "" {
        "x" x: boolean
        "y" y: integer
        "z" z: string
    }
    = {x: false, y: 0, z: ""}

test "computed questions are initialized" 
    with 
    form "" {
        "x" x: boolean = true
        "y" y: integer = 42
        "z" z: string = "hello world!"
    }
    = {x: true, y: 42, z: "hello world!"}

test "disabled questions are not changed"
    with x: 10
    form "" {
        if (1 > 2) "x" x: integer
    }
    = {x: 0}

test "questions retain values across visibility changes"
    with x: true, y: 42, x: false, z: 2, x: true
    form "" {
        "X" x: boolean
        if (x) 
            "Y" y: integer
        "Z" z: integer
        "Sum" sum: integer = z + y
    }
    = {x: true, y: 42, z: 2, sum: 44}

test "referencing works out of order"
    with x: 10
    form "" {
        "y" y: integer = x
        "x" x: integer
    }
    = {x: 10, y: 10}

test "fixpoint evaluation" 
    with c: 10
    form "" {
        "A" a: integer = c+b+1
        "B" b: integer = c+1
        "C" c: integer
    }
    = {a: 22, b: 11, c: 10}

test "dividing by zero returns zero"
    with
    form "" {
        "X" x: integer = 1 / 0
    }
    = {x: 0}


test "multiplication has higher precedence than addition"
    with
    form "" {
        "X" x: integer = 1 + 2 * 3
    }
    = {x: 7}

test "no dangling else"
    with
    form "" {
        if (0 > 0){
            if (0 > 0)
              "a" a: integer = 1
            else 
                "a" a: integer = 2
        }
    }
    = {a: 0} // otherwise, it would be {a: 2}

test "subtraction associates to the left"
    with
    form "" {
        "X" x: integer = 1 - 2 - 3
    }
    = {x: -4}
test "parentheses override associativity"
    with
    form "" {
        "X" x: integer = 1 - (2 - 3)
    }
    = {x: 2}

section "Rendering tests"

test "empty form renders empty" 
    with
    form "" {
    }
    renders as [
    ]

test "disabled questions don't render"
    with
    form "" {
        if (1 > 2) {
            "X" x: integer
        }
    }
    renders as [
    ]


test "enabled questions render"
    with cond: true
    form "" {
        "C" cond: boolean
        if (cond) {
            "X" x: integer
        }
    }
    renders as [
        "C" cond: boolean
        "X" x: integer
    ]


test "unconditional questions render"
    with
    form "" {
        "X" x: integer
        "Y" y: integer
    }
    renders as [
        "X" x: integer
        "Y" y: integer
    ]

test "computed questions render with value"
    with x: 10
    form "" {
        "X" x: integer
        "Y" y: integer = x + x
    }
    renders as [
        "X" x: integer
        "Y" y: integer = 20
    ]