section "Static checking tests"

test "condition must be boolean" 
    form "" {
        if($error(1)) {
            "X" x: integer
        }
    }

test "condition must be boolean (complex)" 
    form "" {
        "A" a: integer
        "B" b: integer
        if($error(a + b)) {
            "X" x: integer
        }
    }

test "conditions are type checked" 
    form "" {
        if($error(true) < 3) {
            "X" x: integer
        }
    }

test "undefined reference in computed question" 
    form "" {
        "bug" x: integer = $error(y)
    }

test "undefined reference in condition" 
    form "" {
        if ($error(x)) {
            "Y" y: integer
        }
    }

test "nested undefined reference" 
    form "" {
        if (1 > $error(x)) {
            "Y" y: integer
        }
    }


test "empty prompt"
    form "" {
        $warning("" x: integer)
    }

test "useless conditional"
    form "" {
        if ($warning(true))
            "X" x: integer
    }

test "empty then branch" 
    form "" {
        if (2 > 1) 
            $warning({})
    }

test "empty else branch" 
    form "" {
        if (2 > 1) 
            "X" x: integer 
        else 
            $warning({})
    }

test "dead else branch"
    form "" {
        if ($warning(true)) 
            "X" x: integer
        else 
            "Y" y: integer

    }

test "dead then branch with else"
    form "" {
        if (false) 
            $warning("X" x: integer)
        else 
            "Y" y: integer
    }

test "dead then branch"
    form "" {
        if (false) 
            $warning("" x: integer)
    }

test "computed question expression must match declared type"
    form "" {
        "X" x: integer = $error(true)
    }

test "redeclared with different type" 
    form "" {
        "X" x: integer
        $error("X" x: boolean)
    }


test "redeclared with different prompt" 
    form "" {
        "foo" x: integer
        $warning("bar" x: integer)
    }



test "duplicate labels" 
    form "" {
        "same" x: integer
        $warning("same" y: boolean)
    }

test "invalid operand to +" 
    form "" {
        "X" x: integer = $error(true) + 1
    }

test "invalid operands to +" 
    form "" {
        "X" x: integer = $error(true) + $error("hello")
    }

test "direct cyclic data dependency"
    form "" {
        $error("X" x: integer = x)
    }


test "indirect cyclic data dependency"
    form "" {
        $error("X" x: integer = y)
        $error("Y" y: integer = z)
        $error("Z" z: integer = x)
    }


test "direct cylic control dependency"
    form "" {
        if (x > 1)
            $error("X" x: integer = 20)
    }

test "indirect cylic data dependency"
    form "" {
        if (x > 1)
            $error("Y" y: integer = 10)
        if (y > 1)
            $error("X" x: integer = 20)
    }


test "tax form"
    form "Tax Office example" { 
        "Did you buy a house in 2010?"
            hasBoughtHouse: boolean [required]
        
        "Did you enter a loan?"
            hasMaintLoan: boolean [required]
            
        "Did you sell a house in 2010?"
            hasSoldHouse: boolean [required]

        "What is your zipcode?" 
            zip: string [\[0-9][0-9][0-9][0-9][A-Z][A-Z]\]   
        
        if (hasSoldHouse) {
            "What was the selling price?"
            sellingPrice: integer [0..100]
            "Private debts for the sold house:"
            privateDebt: integer [0..sellingPrice]
            "Value residue:"
            valueResidue: integer = sellingPrice - privateDebt
        }
    }